name: staging

on:
  push:
    branches:
      - "master"
      
jobs:
  build_image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash
      - uses: rlespinasse/github-slug-action@master
      - uses: mr-smithers-excellent/docker-build-push@v3
        with:
          image: ${{ env.REPOSITORY_NAME }}
          tag: ${{ env.GITHUB_REF_SLUG }}
          registry: ${{ secrets.ACR_REGISTRY_STAGING }}
          username: ${{ secrets.ACR_USERNAME_STAGING }}
          password: ${{ secrets.ACR_PASSWORD_STAGING }}
      - run: docker inspect --format='{{index .RepoDigests 0}}' delphaistaging.azurecr.io/${REPOSITORY_NAME}:${GITHUB_REF_SLUG} > image_sha.txt
      - uses: actions/upload-artifact@v1
        with:
          name: image_sha
          path: image_sha.txt
  deploy:
    runs-on: ubuntu-latest
    needs: build_image
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: image_sha
      - uses: actions/checkout@v2
      - run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash
      - uses: rlespinasse/github-slug-action@master
      - uses: delphai/delphai-kubernetes-deployment@master
        with:
          delphai_enviroment: staging
          client_id: ${{ secrets.ARM_CLIENT_ID_STAGING }}
          client_secret: ${{ secrets.ARM_CLIENT_SECRET_STAGING }}
          tenant_id: ${{ secrets.ARM_TENANT_ID_STAGING }}
          httpport: 7070
          grpcport: 8080