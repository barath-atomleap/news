name: staging

on:
  push:
    branches:
      - "master"

jobs:
  build_image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash
      - uses: mr-smithers-excellent/docker-build-push@v3
        with:
          image: ${{ env.REPOSITORY_NAME }}
          tag: latest
          registry: ${{ secrets.ACR_REGISTRY_STAGING }}
          username: ${{ secrets.ACR_USERNAME_STAGING }}
          password: ${{ secrets.ACR_PASSWORD_STAGING }}
  deploy_to_kubernetes:
    runs-on: ubuntu-latest
    needs: build_image
    steps:
      - uses: azure/aks-set-context@v1
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS_STAGING }}"
          resource-group: delphai-staging
          cluster-name: delphai-staging
      - run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
      - run: |
          cat << EOF > main.tf.template
          terraform {
            backend "azurerm" {
              resource_group_name  = "base-infrastructure-terraform"
              key                  = "${REPOSITORY_NAME}.tfstate"
              storage_account_name = "delphaistaging"
              container_name       = "delphai-staging-terraform-state"
            }
          }
          module "delphai-app" {
            source      = "github.com/delphai/infrastructure//modules/delphai-app"
            app_port    = 8080
            delphai_env = "staging"
            image       = "delphaistaging.azurecr.io/${REPOSITORY_NAME}"
            name        = "${REPOSITORY_NAME}"
            namespace   = "delphai"
            has_ingress = false
          }
          EOF
      - uses: nowactions/envsubst@v1
        with:
          input: ./main.tf.template
          output: ./main.tf
      - run: mkdir -p ~/.kube && cp ${KUBECONFIG} ~/.kube/config
      - uses: hashicorp/setup-terraform@v1
      - uses: azure/setup-kubectl@v1
      - run: kubectl create ns delphai --dry-run=client --output yaml | kubectl apply -f -
      - run: terraform init && terraform apply -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID_STAGING }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET_STAGING }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID_STAGING }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID_STAGING }}
      - run: kubectl patch deployment ${REPOSITORY_NAME} --namespace delphai -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"
